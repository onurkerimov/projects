!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){!function(e){"use strict";var t=function(){},n={},o=[],r=[];function i(e,i){var s=r,l=void 0,a=void 0,c=void 0,u=void 0;for(u=arguments.length;u-- >2;)o.push(arguments[u]);for(i&&null!=i.children&&(o.length||o.push(i.children),delete i.children);o.length;)if((a=o.pop())&&void 0!==a.pop)for(u=a.length;u--;)o.push(a[u]);else"boolean"==typeof a&&(a=null),(c="function"!=typeof e)&&(null==a?a="":"number"==typeof a?a=String(a):"string"!=typeof a&&(c=!1)),c&&l?s[s.length-1]+=a:s===r?s=[a]:s.push(a),l=c;var p=new t;return p.nodeName=e,p.children=s,p.attributes=null==i?void 0:i,p.key=null==i?void 0:i.key,void 0!==n.vnode&&n.vnode(p),p}function s(e,t){for(var n in t)e[n]=t[n];return e}function l(e,t){e&&("function"==typeof e?e(t):e.current=t)}var a="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout;function c(e,t){return i(e.nodeName,s(s({},e.attributes),t),arguments.length>2?[].slice.call(arguments,2):e.children)}var u=0,p=1,d=2,f=3,m="__preactattr_",h=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,v=[];function b(e){!e._dirty&&(e._dirty=!0)&&1==v.push(e)&&(n.debounceRendering||a)(y)}function y(){for(var e=void 0;e=v.pop();)e._dirty&&B(e)}function g(e,t){return e.normalizedNodeName===t||e.nodeName.toLowerCase()===t.toLowerCase()}function x(e){var t=s({},e.attributes);t.children=e.children;var n=e.nodeName.defaultProps;if(void 0!==n)for(var o in n)void 0===t[o]&&(t[o]=n[o]);return t}function j(e){var t=e.parentNode;t&&t.removeChild(e)}function _(e,t,n,o,r){if("className"===t&&(t="class"),"key"===t);else if("ref"===t)l(n,null),l(o,e);else if("class"!==t||r)if("style"===t){if(o&&"string"!=typeof o&&"string"!=typeof n||(e.style.cssText=o||""),o&&"object"==typeof o){if("string"!=typeof n)for(var i in n)i in o||(e.style[i]="");for(var s in o)e.style[s]="number"==typeof o[s]&&!1===h.test(s)?o[s]+"px":o[s]}}else if("dangerouslySetInnerHTML"===t)o&&(e.innerHTML=o.__html||"");else if("o"==t[0]&&"n"==t[1]){var a=t!==(t=t.replace(/Capture$/,""));t=t.toLowerCase().substring(2),o?n||e.addEventListener(t,C,a):e.removeEventListener(t,C,a),(e._listeners||(e._listeners={}))[t]=o}else if("list"!==t&&"type"!==t&&!r&&t in e){try{e[t]=null==o?"":o}catch(e){}null!=o&&!1!==o||"spellcheck"==t||e.removeAttribute(t)}else{var c=r&&t!==(t=t.replace(/^xlink:?/,""));null==o||!1===o?c?e.removeAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase()):e.removeAttribute(t):"function"!=typeof o&&(c?e.setAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase(),o):e.setAttribute(t,o))}else e.className=o||""}function C(e){return this._listeners[e.type](n.event&&n.event(e)||e)}var O=[],w=0,S=!1,k=!1;function N(){for(var e=void 0;e=O.shift();)n.afterMount&&n.afterMount(e),e.componentDidMount&&e.componentDidMount()}function P(e,t,n,o,r,i){w++||(S=null!=r&&void 0!==r.ownerSVGElement,k=null!=e&&!(m in e));var s=T(e,t,n,o,i);return r&&s.parentNode!==r&&r.appendChild(s),--w||(k=!1,i||N()),s}function T(e,t,n,o,r){var i=e,s=S;if(null!=t&&"boolean"!=typeof t||(t=""),"string"==typeof t||"number"==typeof t)return e&&void 0!==e.splitText&&e.parentNode&&(!e._component||r)?e.nodeValue!=t&&(e.nodeValue=t):(i=document.createTextNode(t),e&&(e.parentNode&&e.parentNode.replaceChild(i,e),M(e,!0))),i[m]=!0,i;var l,a,c=t.nodeName;if("function"==typeof c)return function(e,t,n,o){for(var r=e&&e._component,i=r,s=e,l=r&&e._componentConstructor===t.nodeName,a=l,c=x(t);r&&!a&&(r=r._parentComponent);)a=r.constructor===t.nodeName;return r&&a&&(!o||r._component)?(W(r,c,f,n,o),e=r.base):(i&&!l&&(I(i),e=s=null),r=U(t.nodeName,c,n),e&&!r.nextBase&&(r.nextBase=e,s=null),W(r,c,p,n,o),e=r.base,s&&e!==s&&(s._component=null,M(s,!1))),e}(e,t,n,o);if(S="svg"===c||"foreignObject"!==c&&S,c=String(c),(!e||!g(e,c))&&(l=c,(a=S?document.createElementNS("http://www.w3.org/2000/svg",l):document.createElement(l)).normalizedNodeName=l,i=a,e)){for(;e.firstChild;)i.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(i,e),M(e,!0)}var u=i.firstChild,d=i[m],h=t.children;if(null==d){d=i[m]={};for(var v=i.attributes,b=v.length;b--;)d[v[b].name]=v[b].value}return!k&&h&&1===h.length&&"string"==typeof h[0]&&null!=u&&void 0!==u.splitText&&null==u.nextSibling?u.nodeValue!=h[0]&&(u.nodeValue=h[0]):(h&&h.length||null!=u)&&function(e,t,n,o,r){var i,s,l,a=e.childNodes,c=[],u={},p=0,d=0,f=a.length,h=0,v=t?t.length:0,b=void 0,y=void 0,x=void 0,_=void 0,C=void 0;if(0!==f)for(var O=0;O<f;O++){var w=a[O],S=w[m],k=v&&S?w._component?w._component.__key:S.key:null;null!=k?(p++,u[k]=w):(S||(void 0!==w.splitText?!r||w.nodeValue.trim():r))&&(c[h++]=w)}if(0!==v)for(var N=0;N<v;N++){_=t[N],C=null;var P=_.key;if(null!=P)p&&void 0!==u[P]&&(C=u[P],u[P]=void 0,p--);else if(d<h)for(b=d;b<h;b++)if(void 0!==c[b]&&(i=y=c[b],l=r,"string"==typeof(s=_)||"number"==typeof s?void 0!==i.splitText:"string"==typeof s.nodeName?!i._componentConstructor&&g(i,s.nodeName):l||i._componentConstructor===s.nodeName)){C=y,c[b]=void 0,b===h-1&&h--,b===d&&d++;break}C=T(C,_,n,o),x=a[N],C&&C!==e&&C!==x&&(null==x?e.appendChild(C):C===x.nextSibling?j(x):e.insertBefore(C,x))}if(p)for(var E in u)void 0!==u[E]&&M(u[E],!1);for(;d<=h;)void 0!==(C=c[h--])&&M(C,!1)}(i,h,n,o,k||null!=d.dangerouslySetInnerHTML),function(e,t,n){var o=void 0;for(o in n)t&&null!=t[o]||null==n[o]||_(e,o,n[o],n[o]=void 0,S);for(o in t)"children"===o||"innerHTML"===o||o in n&&t[o]===("value"===o||"checked"===o?e[o]:n[o])||_(e,o,n[o],n[o]=t[o],S)}(i,t.attributes,d),S=s,i}function M(e,t){var n=e._component;n?I(n):(null!=e[m]&&l(e[m].ref,null),!1!==t&&null!=e[m]||j(e),E(e))}function E(e){for(e=e.lastChild;e;){var t=e.previousSibling;M(e,!0),e=t}}var L=[];function U(e,t,n){var o=void 0,r=L.length;for(e.prototype&&e.prototype.render?(o=new e(t,n),D.call(o,t,n)):((o=new D(t,n)).constructor=e,o.render=A);r--;)if(L[r].constructor===e)return o.nextBase=L[r].nextBase,L.splice(r,1),o;return o}function A(e,t,n){return this.constructor(e,n)}function W(e,t,o,r,i){e._disable||(e._disable=!0,e.__ref=t.ref,e.__key=t.key,delete t.ref,delete t.key,void 0===e.constructor.getDerivedStateFromProps&&(!e.base||i?e.componentWillMount&&e.componentWillMount():e.componentWillReceiveProps&&e.componentWillReceiveProps(t,r)),r&&r!==e.context&&(e.prevContext||(e.prevContext=e.context),e.context=r),e.prevProps||(e.prevProps=e.props),e.props=t,e._disable=!1,o!==u&&(o!==p&&!1===n.syncComponentUpdates&&e.base?b(e):B(e,p,i)),l(e.__ref,e))}function B(e,t,o,r){if(!e._disable){var i=e.props,l=e.state,a=e.context,c=e.prevProps||i,f=e.prevState||l,m=e.prevContext||a,h=e.base,v=e.nextBase,b=h||v,y=e._component,g=!1,j=m,_=void 0,C=void 0,S=void 0;if(e.constructor.getDerivedStateFromProps&&(l=s(s({},l),e.constructor.getDerivedStateFromProps(i,l)),e.state=l),h&&(e.props=c,e.state=f,e.context=m,t!==d&&e.shouldComponentUpdate&&!1===e.shouldComponentUpdate(i,l,a)?g=!0:e.componentWillUpdate&&e.componentWillUpdate(i,l,a),e.props=i,e.state=l,e.context=a),e.prevProps=e.prevState=e.prevContext=e.nextBase=null,e._dirty=!1,!g){_=e.render(i,l,a),e.getChildContext&&(a=s(s({},a),e.getChildContext())),h&&e.getSnapshotBeforeUpdate&&(j=e.getSnapshotBeforeUpdate(c,f));var k=_&&_.nodeName,T=void 0,E=void 0;if("function"==typeof k){var L=x(_);(C=y)&&C.constructor===k&&L.key==C.__key?W(C,L,p,a,!1):(T=C,e._component=C=U(k,L,a),C.nextBase=C.nextBase||v,C._parentComponent=e,W(C,L,u,a,!1),B(C,p,o,!0)),E=C.base}else S=b,(T=y)&&(S=e._component=null),(b||t===p)&&(S&&(S._component=null),E=P(S,_,a,o||!h,b&&b.parentNode,!0));if(b&&E!==b&&C!==y){var A=b.parentNode;A&&E!==A&&(A.replaceChild(E,b),T||(b._component=null,M(b,!1)))}if(T&&I(T),e.base=E,E&&!r){for(var D=e,R=e;R=R._parentComponent;)(D=R).base=E;E._component=D,E._componentConstructor=D.constructor}}for(!h||o?O.push(e):g||(e.componentDidUpdate&&e.componentDidUpdate(c,f,j),n.afterUpdate&&n.afterUpdate(e));e._renderCallbacks.length;)e._renderCallbacks.pop().call(e);w||r||N()}}function I(e){n.beforeUnmount&&n.beforeUnmount(e);var t=e.base;e._disable=!0,e.componentWillUnmount&&e.componentWillUnmount(),e.base=null;var o=e._component;o?I(o):t&&(null!=t[m]&&l(t[m].ref,null),e.nextBase=t,j(t),L.push(e),E(t)),l(e.__ref,null)}function D(e,t){this._dirty=!0,this.context=t,this.props=e,this.state=this.state||{},this._renderCallbacks=[]}function R(e,t,n){return P(n,e,{},!1,t,!1)}function z(){return{}}s(D.prototype,{setState:function(e,t){this.prevState||(this.prevState=this.state),this.state=s(s({},this.state),"function"==typeof e?e(this.state,this.props):e),t&&this._renderCallbacks.push(t),b(this)},forceUpdate:function(e){e&&this._renderCallbacks.push(e),B(this,d)},render:function(){}});var F={h:i,createElement:i,cloneElement:c,createRef:z,Component:D,render:R,rerender:y,options:n};e.default=F,e.h=i,e.createElement=i,e.cloneElement=c,e.createRef=z,e.Component=D,e.render=R,e.rerender=y,e.options=n,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,n){"use strict";n.r(t);var o=n(0);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function s(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),s(this,l(t).apply(this,arguments))}var n,r,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(t,o["Component"]),n=t,(r=[{key:"render",value:function(){return Object(o.h)("div",{class:"flex-1 m-2"},Object(o.h)("div",{class:"shadow rounded-b"},Object(o.h)("a",{href:this.props.url},Object(o.h)("img",{src:this.props.imgSrc,class:"rounded-t"})),Object(o.h)("div",{class:"bg-white -mt-1 px-4 py-3 rounded-b"},Object(o.h)("a",{href:this.props.url,class:"font-bold text-gray-800 hover:text-black"},this.props.title),Object(o.h)("a",{href:this.props.url,class:"block my-2 font-normal text-sm no-underline text-gray-800 hover:text-black"},this.props.description),Object(o.h)("div",null,Object(o.h)("span",{class:"no-underline text-xs text-black tracking-wide font-normal"},this.props.more)))))}}])&&i(n.prototype,r),c&&i(n,c),t}(),u=function(e){var t=e.children;return Object(o.h)("div",{class:"block md:flex md:justify-between"}," ",t," ")},p=document.querySelector("#list");Object(o.render)(Object(o.h)(o.Fragment,null,Object(o.h)(u,null,Object(o.h)(c,{imgSrc:"assets/flexboxy.jpg",title:"flexboxy.com - Web's Flexbox Editor",description:"Flexboxy is an open source tool for building flexbox-based layouts. The online editor lets you build templates faster than ever, by generating HTML and CSS for you.",more:"Webpack · Babel · Canvas API · PostCSS · Autoprefixer · SASS · EJS",url:"https://www.flexboxy.com/"}),Object(o.h)(c,{imgSrc:"./assets/displacement.jpg",title:"Interactive Displacement Map Experiment",description:"This project is started as a music visualizer. Mouse position modulates displacement filter position and image position. Also, there is a glitch filter on mouse click. Snow crystal images from Wikimedia are used. ",more:"WebGL · PIXI.js",url:"https://displacement-map.netlify.com/"})),Object(o.h)(u,null,Object(o.h)(c,{imgSrc:"assets/yt.jpg",title:"YouTube Video Effects",description:"A Chrome extension that provides realtime video effects for YouTube. Uses WebGL technology. Powered by glfx.js to provide effects.",more:"Chrome Extension · WebGL · glfx.js",url:"https://github.com/onurkerimov/youtube-video-effects"}),Object(o.h)(c,{imgSrc:"assets/monkey.jpg",title:"Fake 3D Rotation Experiment",description:"In this project, I rotated a sculpture (a very precious gift) on a turntable and extracted a spritesheet. Mouse position determines the frame index of the sprite.",more:"WebGL · PIXI.js · RenderTexture · Spritesheet",url:"https://onurkerimov.github.io/damla"}),Object(o.h)(c,{imgSrc:"assets/canvas.jpg",title:"Canvas2D Draw Experiment",description:"Moving Averages of mouse coordinates are calculated continuously to give an expressive effect. Press [S] to save screenshots. Could possibly be used as a music visualizer.",more:"WebGL · PIXI.js",url:"https://onurkerimov.github.io/drawMouse-movingAverage/"})),Object(o.h)("div",{class:"flex-grow flex flex-col justify-center p-4"},Object(o.h)("div",{class:"md:px-8 pl-0"},Object(o.h)("p",{class:"sm:text-xl text-gray-600 mt-3 leading-relaxed"},"I also developed the following reusable plugins while building things."))),Object(o.h)(u,null,Object(o.h)(c,{title:"enhanceZoom.js",description:"Prevent zoom on some elements on a page (or whole page), set custom zoom factors to elements with mathematical expressions\r ",url:"https://github.com/onurkerimov/enhanceZoom.js"}),Object(o.h)(c,{title:"pseudo.js",description:"A plugin to convert :before and :after pseudo elements to real elements",url:"https://github.com/onurkerimov/pseudo.js"}),Object(o.h)(c,{title:"curly.js",description:"Converts text with indentation to tree hierarchy",url:"https://github.com/onurkerimov/curly.js"}),Object(o.h)(c,{title:"timeout.js",description:"A smarter setTimeout that involves grouping & instances",url:"https://github.com/onurkerimov/timeout.js"})),Object(o.h)("div",{class:"flex-grow flex flex-col justify-center p-4"},Object(o.h)("div",{class:"md:px-8 pl-0"},Object(o.h)("p",{class:"sm:text-xl text-gray-600 mt-3 leading-relaxed"},"Here are some experimental plugins by me:"))),Object(o.h)(u,null,Object(o.h)(c,{title:"deep.js",description:"A shorter replacement for deeply nested for/forEach loops",url:"https://github.com/onurkerimov/deep.js"}),Object(o.h)(c,{title:"match.js",description:"An alternative for if/else sometimes and switch/case most of the times",url:"https://github.com/onurkerimov/match.js"}))),p)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC51bWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvbGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVk5vZGUiLCJvcHRpb25zIiwic3RhY2siLCJFTVBUWV9DSElMRFJFTiIsImgiLCJub2RlTmFtZSIsImF0dHJpYnV0ZXMiLCJjaGlsZHJlbiIsImxhc3RTaW1wbGUiLCJjaGlsZCIsInNpbXBsZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInB1c2giLCJwb3AiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJ2bm9kZSIsImV4dGVuZCIsIm9iaiIsInByb3BzIiwiYXBwbHlSZWYiLCJyZWYiLCJjdXJyZW50IiwiZGVmZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJzZXRUaW1lb3V0IiwiY2xvbmVFbGVtZW50Iiwic2xpY2UiLCJOT19SRU5ERVIiLCJTWU5DX1JFTkRFUiIsIkZPUkNFX1JFTkRFUiIsIkFTWU5DX1JFTkRFUiIsIkFUVFJfS0VZIiwiSVNfTk9OX0RJTUVOU0lPTkFMIiwiaXRlbXMiLCJlbnF1ZXVlUmVuZGVyIiwiY29tcG9uZW50IiwiX2RpcnR5IiwiZGVib3VuY2VSZW5kZXJpbmciLCJyZXJlbmRlciIsInJlbmRlckNvbXBvbmVudCIsImlzTmFtZWROb2RlIiwibm9kZSIsIm5vcm1hbGl6ZWROb2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiZ2V0Tm9kZVByb3BzIiwiZGVmYXVsdFByb3BzIiwicmVtb3ZlTm9kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInNldEFjY2Vzc29yIiwib2xkIiwiaXNTdmciLCJzdHlsZSIsImNzc1RleHQiLCJfaSIsInRlc3QiLCJpbm5lckhUTUwiLCJfX2h0bWwiLCJ1c2VDYXB0dXJlIiwicmVwbGFjZSIsInN1YnN0cmluZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudFByb3h5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9saXN0ZW5lcnMiLCJlIiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZSIsImNsYXNzTmFtZSIsInRoaXMiLCJ0eXBlIiwiZXZlbnQiLCJtb3VudHMiLCJkaWZmTGV2ZWwiLCJpc1N2Z01vZGUiLCJoeWRyYXRpbmciLCJmbHVzaE1vdW50cyIsInNoaWZ0IiwiYWZ0ZXJNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiZGlmZiIsImRvbSIsImNvbnRleHQiLCJtb3VudEFsbCIsInBhcmVudCIsImNvbXBvbmVudFJvb3QiLCJvd25lclNWR0VsZW1lbnQiLCJyZXQiLCJpZGlmZiIsImFwcGVuZENoaWxkIiwib3V0IiwicHJldlN2Z01vZGUiLCJzcGxpdFRleHQiLCJfY29tcG9uZW50Iiwibm9kZVZhbHVlIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsInJlcGxhY2VDaGlsZCIsInJlY29sbGVjdE5vZGVUcmVlIiwidm5vZGVOYW1lIiwib3JpZ2luYWxDb21wb25lbnQiLCJvbGREb20iLCJpc0RpcmVjdE93bmVyIiwiX2NvbXBvbmVudENvbnN0cnVjdG9yIiwiaXNPd25lciIsIl9wYXJlbnRDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInNldENvbXBvbmVudFByb3BzIiwiYmFzZSIsInVubW91bnRDb21wb25lbnQiLCJjcmVhdGVDb21wb25lbnQiLCJuZXh0QmFzZSIsImJ1aWxkQ29tcG9uZW50RnJvbVZOb2RlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlRWxlbWVudCIsImZpcnN0Q2hpbGQiLCJmYyIsInZjaGlsZHJlbiIsImEiLCJuZXh0U2libGluZyIsImlzSHlkcmF0aW5nIiwib3JpZ2luYWxDaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJrZXllZCIsImtleWVkTGVuIiwibWluIiwibGVuIiwiY2hpbGRyZW5MZW4iLCJ2bGVuIiwiaiIsImYiLCJ2Y2hpbGQiLCJfY2hpbGQiLCJfX2tleSIsInRyaW0iLCJfa2V5IiwiaW5zZXJ0QmVmb3JlIiwiX2kyIiwiaW5uZXJEaWZmTm9kZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiYXR0cnMiLCJkaWZmQXR0cmlidXRlcyIsInVubW91bnRPbmx5IiwicmVtb3ZlQ2hpbGRyZW4iLCJsYXN0Q2hpbGQiLCJuZXh0IiwicHJldmlvdXNTaWJsaW5nIiwicmVjeWNsZXJDb21wb25lbnRzIiwiQ3RvciIsImluc3QiLCJyZW5kZXIiLCJDb21wb25lbnQiLCJkb1JlbmRlciIsInNwbGljZSIsInN0YXRlIiwicmVuZGVyTW9kZSIsIl9kaXNhYmxlIiwiX19yZWYiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicHJldkNvbnRleHQiLCJwcmV2UHJvcHMiLCJzeW5jQ29tcG9uZW50VXBkYXRlcyIsImlzQ2hpbGQiLCJwcmV2aW91c1Byb3BzIiwicHJldmlvdXNTdGF0ZSIsInByZXZTdGF0ZSIsInByZXZpb3VzQ29udGV4dCIsImlzVXBkYXRlIiwiaW5pdGlhbEJhc2UiLCJpbml0aWFsQ2hpbGRDb21wb25lbnQiLCJza2lwIiwic25hcHNob3QiLCJyZW5kZXJlZCIsImNiYXNlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImdldENoaWxkQ29udGV4dCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY2hpbGRDb21wb25lbnQiLCJ0b1VubW91bnQiLCJjaGlsZFByb3BzIiwiYmFzZVBhcmVudCIsImNvbXBvbmVudFJlZiIsImNvbXBvbmVudERpZFVwZGF0ZSIsImFmdGVyVXBkYXRlIiwiX3JlbmRlckNhbGxiYWNrcyIsImJlZm9yZVVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImlubmVyIiwibWVyZ2UiLCJjcmVhdGVSZWYiLCJzZXRTdGF0ZSIsImNhbGxiYWNrIiwiZm9yY2VVcGRhdGUiLCJwcmVhY3QiLCJkZWZhdWx0IiwiZmFjdG9yeSIsImxpc3RJdGVtIiwicHJlYWN0X3VtZCIsImNsYXNzIiwiaHJlZiIsInVybCIsInNyYyIsImltZ1NyYyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJtb3JlIiwiTGluZSIsIl9yZWYiLCJsaXN0IiwicXVlcnlTZWxlY3RvciIsImpzX0xpbmUiLCJsaXN0SXRlbV9saXN0SXRlbSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FB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IGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwucHJlYWN0ID0ge30pKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cblx0dmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUoKSB7fTtcblxuXHR2YXIgb3B0aW9ucyA9IHt9O1xuXG5cdHZhciBzdGFjayA9IFtdO1xuXG5cdHZhciBFTVBUWV9DSElMRFJFTiA9IFtdO1xuXG5cdGZ1bmN0aW9uIGgobm9kZU5hbWUsIGF0dHJpYnV0ZXMpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSBFTVBUWV9DSElMRFJFTixcblx0XHQgICAgbGFzdFNpbXBsZSA9IHZvaWQgMCxcblx0XHQgICAgY2hpbGQgPSB2b2lkIDAsXG5cdFx0ICAgIHNpbXBsZSA9IHZvaWQgMCxcblx0XHQgICAgaSA9IHZvaWQgMDtcblx0XHRmb3IgKGkgPSBhcmd1bWVudHMubGVuZ3RoOyBpLS0gPiAyOykge1xuXHRcdFx0c3RhY2sucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdH1cblx0XHRpZiAoYXR0cmlidXRlcyAmJiBhdHRyaWJ1dGVzLmNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdGlmICghc3RhY2subGVuZ3RoKSBzdGFjay5wdXNoKGF0dHJpYnV0ZXMuY2hpbGRyZW4pO1xuXHRcdFx0ZGVsZXRlIGF0dHJpYnV0ZXMuY2hpbGRyZW47XG5cdFx0fVxuXHRcdHdoaWxlIChzdGFjay5sZW5ndGgpIHtcblx0XHRcdGlmICgoY2hpbGQgPSBzdGFjay5wb3AoKSkgJiYgY2hpbGQucG9wICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Zm9yIChpID0gY2hpbGQubGVuZ3RoOyBpLS07KSB7XG5cdFx0XHRcdFx0c3RhY2sucHVzaChjaGlsZFtpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgY2hpbGQgPT09ICdib29sZWFuJykgY2hpbGQgPSBudWxsO1xuXG5cdFx0XHRcdGlmIChzaW1wbGUgPSB0eXBlb2Ygbm9kZU5hbWUgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRpZiAoY2hpbGQgPT0gbnVsbCkgY2hpbGQgPSAnJztlbHNlIGlmICh0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSBjaGlsZCA9IFN0cmluZyhjaGlsZCk7ZWxzZSBpZiAodHlwZW9mIGNoaWxkICE9PSAnc3RyaW5nJykgc2ltcGxlID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc2ltcGxlICYmIGxhc3RTaW1wbGUpIHtcblx0XHRcdFx0XHRjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSArPSBjaGlsZDtcblx0XHRcdFx0fSBlbHNlIGlmIChjaGlsZHJlbiA9PT0gRU1QVFlfQ0hJTERSRU4pIHtcblx0XHRcdFx0XHRjaGlsZHJlbiA9IFtjaGlsZF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsYXN0U2ltcGxlID0gc2ltcGxlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBwID0gbmV3IFZOb2RlKCk7XG5cdFx0cC5ub2RlTmFtZSA9IG5vZGVOYW1lO1xuXHRcdHAuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblx0XHRwLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzID09IG51bGwgPyB1bmRlZmluZWQgOiBhdHRyaWJ1dGVzO1xuXHRcdHAua2V5ID0gYXR0cmlidXRlcyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXR0cmlidXRlcy5rZXk7XG5cblx0XHRpZiAob3B0aW9ucy52bm9kZSAhPT0gdW5kZWZpbmVkKSBvcHRpb25zLnZub2RlKHApO1xuXG5cdFx0cmV0dXJuIHA7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQob2JqLCBwcm9wcykge1xuXHQgIGZvciAodmFyIGkgaW4gcHJvcHMpIHtcblx0ICAgIG9ialtpXSA9IHByb3BzW2ldO1xuXHQgIH1yZXR1cm4gb2JqO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXBwbHlSZWYocmVmLCB2YWx1ZSkge1xuXHQgIGlmIChyZWYpIHtcblx0ICAgIGlmICh0eXBlb2YgcmVmID09ICdmdW5jdGlvbicpIHJlZih2YWx1ZSk7ZWxzZSByZWYuY3VycmVudCA9IHZhbHVlO1xuXHQgIH1cblx0fVxuXG5cdHZhciBkZWZlciA9IHR5cGVvZiBQcm9taXNlID09ICdmdW5jdGlvbicgPyBQcm9taXNlLnJlc29sdmUoKS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpIDogc2V0VGltZW91dDtcblxuXHRmdW5jdGlvbiBjbG9uZUVsZW1lbnQodm5vZGUsIHByb3BzKSB7XG5cdCAgcmV0dXJuIGgodm5vZGUubm9kZU5hbWUsIGV4dGVuZChleHRlbmQoe30sIHZub2RlLmF0dHJpYnV0ZXMpLCBwcm9wcyksIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogdm5vZGUuY2hpbGRyZW4pO1xuXHR9XG5cblx0dmFyIE5PX1JFTkRFUiA9IDA7XG5cblx0dmFyIFNZTkNfUkVOREVSID0gMTtcblxuXHR2YXIgRk9SQ0VfUkVOREVSID0gMjtcblxuXHR2YXIgQVNZTkNfUkVOREVSID0gMztcblxuXHR2YXIgQVRUUl9LRVkgPSAnX19wcmVhY3RhdHRyXyc7XG5cblx0dmFyIElTX05PTl9ESU1FTlNJT05BTCA9IC9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZC9pO1xuXG5cdHZhciBpdGVtcyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGVucXVldWVSZW5kZXIoY29tcG9uZW50KSB7XG5cdFx0aWYgKCFjb21wb25lbnQuX2RpcnR5ICYmIChjb21wb25lbnQuX2RpcnR5ID0gdHJ1ZSkgJiYgaXRlbXMucHVzaChjb21wb25lbnQpID09IDEpIHtcblx0XHRcdChvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nIHx8IGRlZmVyKShyZXJlbmRlcik7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVyZW5kZXIoKSB7XG5cdFx0dmFyIHAgPSB2b2lkIDA7XG5cdFx0d2hpbGUgKHAgPSBpdGVtcy5wb3AoKSkge1xuXHRcdFx0aWYgKHAuX2RpcnR5KSByZW5kZXJDb21wb25lbnQocCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gaXNTYW1lTm9kZVR5cGUobm9kZSwgdm5vZGUsIGh5ZHJhdGluZykge1xuXHRcdGlmICh0eXBlb2Ygdm5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2bm9kZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdHJldHVybiBub2RlLnNwbGl0VGV4dCAhPT0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHZub2RlLm5vZGVOYW1lID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuICFub2RlLl9jb21wb25lbnRDb25zdHJ1Y3RvciAmJiBpc05hbWVkTm9kZShub2RlLCB2bm9kZS5ub2RlTmFtZSk7XG5cdFx0fVxuXHRcdHJldHVybiBoeWRyYXRpbmcgfHwgbm9kZS5fY29tcG9uZW50Q29uc3RydWN0b3IgPT09IHZub2RlLm5vZGVOYW1lO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNOYW1lZE5vZGUobm9kZSwgbm9kZU5hbWUpIHtcblx0XHRyZXR1cm4gbm9kZS5ub3JtYWxpemVkTm9kZU5hbWUgPT09IG5vZGVOYW1lIHx8IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldE5vZGVQcm9wcyh2bm9kZSkge1xuXHRcdHZhciBwcm9wcyA9IGV4dGVuZCh7fSwgdm5vZGUuYXR0cmlidXRlcyk7XG5cdFx0cHJvcHMuY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcblxuXHRcdHZhciBkZWZhdWx0UHJvcHMgPSB2bm9kZS5ub2RlTmFtZS5kZWZhdWx0UHJvcHM7XG5cdFx0aWYgKGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRmb3IgKHZhciBpIGluIGRlZmF1bHRQcm9wcykge1xuXHRcdFx0XHRpZiAocHJvcHNbaV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHByb3BzW2ldID0gZGVmYXVsdFByb3BzW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb3BzO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlTm9kZShub2RlTmFtZSwgaXNTdmcpIHtcblx0XHR2YXIgbm9kZSA9IGlzU3ZnID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5vZGVOYW1lKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZU5hbWUpO1xuXHRcdG5vZGUubm9ybWFsaXplZE5vZGVOYW1lID0gbm9kZU5hbWU7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcblx0XHR2YXIgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcblx0XHRpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldEFjY2Vzc29yKG5vZGUsIG5hbWUsIG9sZCwgdmFsdWUsIGlzU3ZnKSB7XG5cdFx0aWYgKG5hbWUgPT09ICdjbGFzc05hbWUnKSBuYW1lID0gJ2NsYXNzJztcblxuXHRcdGlmIChuYW1lID09PSAna2V5Jykge30gZWxzZSBpZiAobmFtZSA9PT0gJ3JlZicpIHtcblx0XHRcdGFwcGx5UmVmKG9sZCwgbnVsbCk7XG5cdFx0XHRhcHBseVJlZih2YWx1ZSwgbm9kZSk7XG5cdFx0fSBlbHNlIGlmIChuYW1lID09PSAnY2xhc3MnICYmICFpc1N2Zykge1xuXHRcdFx0bm9kZS5jbGFzc05hbWUgPSB2YWx1ZSB8fCAnJztcblx0XHR9IGVsc2UgaWYgKG5hbWUgPT09ICdzdHlsZScpIHtcblx0XHRcdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb2xkID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRub2RlLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSB8fCAnJztcblx0XHRcdH1cblx0XHRcdGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmICh0eXBlb2Ygb2xkICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdGZvciAodmFyIGkgaW4gb2xkKSB7XG5cdFx0XHRcdFx0XHRpZiAoIShpIGluIHZhbHVlKSkgbm9kZS5zdHlsZVtpXSA9ICcnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKHZhciBfaSBpbiB2YWx1ZSkge1xuXHRcdFx0XHRcdG5vZGUuc3R5bGVbX2ldID0gdHlwZW9mIHZhbHVlW19pXSA9PT0gJ251bWJlcicgJiYgSVNfTk9OX0RJTUVOU0lPTkFMLnRlc3QoX2kpID09PSBmYWxzZSA/IHZhbHVlW19pXSArICdweCcgOiB2YWx1ZVtfaV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKG5hbWUgPT09ICdkYW5nZXJvdXNseVNldElubmVySFRNTCcpIHtcblx0XHRcdGlmICh2YWx1ZSkgbm9kZS5pbm5lckhUTUwgPSB2YWx1ZS5fX2h0bWwgfHwgJyc7XG5cdFx0fSBlbHNlIGlmIChuYW1lWzBdID09ICdvJyAmJiBuYW1lWzFdID09ICduJykge1xuXHRcdFx0dmFyIHVzZUNhcHR1cmUgPSBuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvQ2FwdHVyZSQvLCAnJykpO1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMik7XG5cdFx0XHRpZiAodmFsdWUpIHtcblx0XHRcdFx0aWYgKCFvbGQpIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudFByb3h5LCB1c2VDYXB0dXJlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudFByb3h5LCB1c2VDYXB0dXJlKTtcblx0XHRcdH1cblx0XHRcdChub2RlLl9saXN0ZW5lcnMgfHwgKG5vZGUuX2xpc3RlbmVycyA9IHt9KSlbbmFtZV0gPSB2YWx1ZTtcblx0XHR9IGVsc2UgaWYgKG5hbWUgIT09ICdsaXN0JyAmJiBuYW1lICE9PSAndHlwZScgJiYgIWlzU3ZnICYmIG5hbWUgaW4gbm9kZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0bm9kZVtuYW1lXSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdGlmICgodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpICYmIG5hbWUgIT0gJ3NwZWxsY2hlY2snKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIG5zID0gaXNTdmcgJiYgbmFtZSAhPT0gKG5hbWUgPSBuYW1lLnJlcGxhY2UoL154bGluazo/LywgJycpKTtcblxuXHRcdFx0aWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdGlmIChucykgbm9kZS5yZW1vdmVBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIG5hbWUudG9Mb3dlckNhc2UoKSk7ZWxzZSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGlmIChucykgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIG5hbWUudG9Mb3dlckNhc2UoKSwgdmFsdWUpO2Vsc2Ugbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGV2ZW50UHJveHkoZSkge1xuXHRcdHJldHVybiB0aGlzLl9saXN0ZW5lcnNbZS50eXBlXShvcHRpb25zLmV2ZW50ICYmIG9wdGlvbnMuZXZlbnQoZSkgfHwgZSk7XG5cdH1cblxuXHR2YXIgbW91bnRzID0gW107XG5cblx0dmFyIGRpZmZMZXZlbCA9IDA7XG5cblx0dmFyIGlzU3ZnTW9kZSA9IGZhbHNlO1xuXG5cdHZhciBoeWRyYXRpbmcgPSBmYWxzZTtcblxuXHRmdW5jdGlvbiBmbHVzaE1vdW50cygpIHtcblx0XHR2YXIgYyA9IHZvaWQgMDtcblx0XHR3aGlsZSAoYyA9IG1vdW50cy5zaGlmdCgpKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5hZnRlck1vdW50KSBvcHRpb25zLmFmdGVyTW91bnQoYyk7XG5cdFx0XHRpZiAoYy5jb21wb25lbnREaWRNb3VudCkgYy5jb21wb25lbnREaWRNb3VudCgpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGRpZmYoZG9tLCB2bm9kZSwgY29udGV4dCwgbW91bnRBbGwsIHBhcmVudCwgY29tcG9uZW50Um9vdCkge1xuXHRcdGlmICghZGlmZkxldmVsKyspIHtcblx0XHRcdGlzU3ZnTW9kZSA9IHBhcmVudCAhPSBudWxsICYmIHBhcmVudC5vd25lclNWR0VsZW1lbnQgIT09IHVuZGVmaW5lZDtcblxuXHRcdFx0aHlkcmF0aW5nID0gZG9tICE9IG51bGwgJiYgIShBVFRSX0tFWSBpbiBkb20pO1xuXHRcdH1cblxuXHRcdHZhciByZXQgPSBpZGlmZihkb20sIHZub2RlLCBjb250ZXh0LCBtb3VudEFsbCwgY29tcG9uZW50Um9vdCk7XG5cblx0XHRpZiAocGFyZW50ICYmIHJldC5wYXJlbnROb2RlICE9PSBwYXJlbnQpIHBhcmVudC5hcHBlbmRDaGlsZChyZXQpO1xuXG5cdFx0aWYgKCEgLS1kaWZmTGV2ZWwpIHtcblx0XHRcdGh5ZHJhdGluZyA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIWNvbXBvbmVudFJvb3QpIGZsdXNoTW91bnRzKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZ1bmN0aW9uIGlkaWZmKGRvbSwgdm5vZGUsIGNvbnRleHQsIG1vdW50QWxsLCBjb21wb25lbnRSb290KSB7XG5cdFx0dmFyIG91dCA9IGRvbSxcblx0XHQgICAgcHJldlN2Z01vZGUgPSBpc1N2Z01vZGU7XG5cblx0XHRpZiAodm5vZGUgPT0gbnVsbCB8fCB0eXBlb2Ygdm5vZGUgPT09ICdib29sZWFuJykgdm5vZGUgPSAnJztcblxuXHRcdGlmICh0eXBlb2Ygdm5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2bm9kZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdGlmIChkb20gJiYgZG9tLnNwbGl0VGV4dCAhPT0gdW5kZWZpbmVkICYmIGRvbS5wYXJlbnROb2RlICYmICghZG9tLl9jb21wb25lbnQgfHwgY29tcG9uZW50Um9vdCkpIHtcblx0XHRcdFx0aWYgKGRvbS5ub2RlVmFsdWUgIT0gdm5vZGUpIHtcblx0XHRcdFx0XHRkb20ubm9kZVZhbHVlID0gdm5vZGU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZub2RlKTtcblx0XHRcdFx0aWYgKGRvbSkge1xuXHRcdFx0XHRcdGlmIChkb20ucGFyZW50Tm9kZSkgZG9tLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG91dCwgZG9tKTtcblx0XHRcdFx0XHRyZWNvbGxlY3ROb2RlVHJlZShkb20sIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG91dFtBVFRSX0tFWV0gPSB0cnVlO1xuXG5cdFx0XHRyZXR1cm4gb3V0O1xuXHRcdH1cblxuXHRcdHZhciB2bm9kZU5hbWUgPSB2bm9kZS5ub2RlTmFtZTtcblx0XHRpZiAodHlwZW9mIHZub2RlTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0cmV0dXJuIGJ1aWxkQ29tcG9uZW50RnJvbVZOb2RlKGRvbSwgdm5vZGUsIGNvbnRleHQsIG1vdW50QWxsKTtcblx0XHR9XG5cblx0XHRpc1N2Z01vZGUgPSB2bm9kZU5hbWUgPT09ICdzdmcnID8gdHJ1ZSA6IHZub2RlTmFtZSA9PT0gJ2ZvcmVpZ25PYmplY3QnID8gZmFsc2UgOiBpc1N2Z01vZGU7XG5cblx0XHR2bm9kZU5hbWUgPSBTdHJpbmcodm5vZGVOYW1lKTtcblx0XHRpZiAoIWRvbSB8fCAhaXNOYW1lZE5vZGUoZG9tLCB2bm9kZU5hbWUpKSB7XG5cdFx0XHRvdXQgPSBjcmVhdGVOb2RlKHZub2RlTmFtZSwgaXNTdmdNb2RlKTtcblxuXHRcdFx0aWYgKGRvbSkge1xuXHRcdFx0XHR3aGlsZSAoZG9tLmZpcnN0Q2hpbGQpIHtcblx0XHRcdFx0XHRvdXQuYXBwZW5kQ2hpbGQoZG9tLmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkb20ucGFyZW50Tm9kZSkgZG9tLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG91dCwgZG9tKTtcblxuXHRcdFx0XHRyZWNvbGxlY3ROb2RlVHJlZShkb20sIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBmYyA9IG91dC5maXJzdENoaWxkLFxuXHRcdCAgICBwcm9wcyA9IG91dFtBVFRSX0tFWV0sXG5cdFx0ICAgIHZjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuXG5cdFx0aWYgKHByb3BzID09IG51bGwpIHtcblx0XHRcdHByb3BzID0gb3V0W0FUVFJfS0VZXSA9IHt9O1xuXHRcdFx0Zm9yICh2YXIgYSA9IG91dC5hdHRyaWJ1dGVzLCBpID0gYS5sZW5ndGg7IGktLTspIHtcblx0XHRcdFx0cHJvcHNbYVtpXS5uYW1lXSA9IGFbaV0udmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFoeWRyYXRpbmcgJiYgdmNoaWxkcmVuICYmIHZjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgdHlwZW9mIHZjaGlsZHJlblswXSA9PT0gJ3N0cmluZycgJiYgZmMgIT0gbnVsbCAmJiBmYy5zcGxpdFRleHQgIT09IHVuZGVmaW5lZCAmJiBmYy5uZXh0U2libGluZyA9PSBudWxsKSB7XG5cdFx0XHRpZiAoZmMubm9kZVZhbHVlICE9IHZjaGlsZHJlblswXSkge1xuXHRcdFx0XHRmYy5ub2RlVmFsdWUgPSB2Y2hpbGRyZW5bMF07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh2Y2hpbGRyZW4gJiYgdmNoaWxkcmVuLmxlbmd0aCB8fCBmYyAhPSBudWxsKSB7XG5cdFx0XHRcdGlubmVyRGlmZk5vZGUob3V0LCB2Y2hpbGRyZW4sIGNvbnRleHQsIG1vdW50QWxsLCBoeWRyYXRpbmcgfHwgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCk7XG5cdFx0XHR9XG5cblx0XHRkaWZmQXR0cmlidXRlcyhvdXQsIHZub2RlLmF0dHJpYnV0ZXMsIHByb3BzKTtcblxuXHRcdGlzU3ZnTW9kZSA9IHByZXZTdmdNb2RlO1xuXG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGlubmVyRGlmZk5vZGUoZG9tLCB2Y2hpbGRyZW4sIGNvbnRleHQsIG1vdW50QWxsLCBpc0h5ZHJhdGluZykge1xuXHRcdHZhciBvcmlnaW5hbENoaWxkcmVuID0gZG9tLmNoaWxkTm9kZXMsXG5cdFx0ICAgIGNoaWxkcmVuID0gW10sXG5cdFx0ICAgIGtleWVkID0ge30sXG5cdFx0ICAgIGtleWVkTGVuID0gMCxcblx0XHQgICAgbWluID0gMCxcblx0XHQgICAgbGVuID0gb3JpZ2luYWxDaGlsZHJlbi5sZW5ndGgsXG5cdFx0ICAgIGNoaWxkcmVuTGVuID0gMCxcblx0XHQgICAgdmxlbiA9IHZjaGlsZHJlbiA/IHZjaGlsZHJlbi5sZW5ndGggOiAwLFxuXHRcdCAgICBqID0gdm9pZCAwLFxuXHRcdCAgICBjID0gdm9pZCAwLFxuXHRcdCAgICBmID0gdm9pZCAwLFxuXHRcdCAgICB2Y2hpbGQgPSB2b2lkIDAsXG5cdFx0ICAgIGNoaWxkID0gdm9pZCAwO1xuXG5cdFx0aWYgKGxlbiAhPT0gMCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHR2YXIgX2NoaWxkID0gb3JpZ2luYWxDaGlsZHJlbltpXSxcblx0XHRcdFx0ICAgIHByb3BzID0gX2NoaWxkW0FUVFJfS0VZXSxcblx0XHRcdFx0ICAgIGtleSA9IHZsZW4gJiYgcHJvcHMgPyBfY2hpbGQuX2NvbXBvbmVudCA/IF9jaGlsZC5fY29tcG9uZW50Ll9fa2V5IDogcHJvcHMua2V5IDogbnVsbDtcblx0XHRcdFx0aWYgKGtleSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0a2V5ZWRMZW4rKztcblx0XHRcdFx0XHRrZXllZFtrZXldID0gX2NoaWxkO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHByb3BzIHx8IChfY2hpbGQuc3BsaXRUZXh0ICE9PSB1bmRlZmluZWQgPyBpc0h5ZHJhdGluZyA/IF9jaGlsZC5ub2RlVmFsdWUudHJpbSgpIDogdHJ1ZSA6IGlzSHlkcmF0aW5nKSkge1xuXHRcdFx0XHRcdGNoaWxkcmVuW2NoaWxkcmVuTGVuKytdID0gX2NoaWxkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHZsZW4gIT09IDApIHtcblx0XHRcdGZvciAodmFyIF9pID0gMDsgX2kgPCB2bGVuOyBfaSsrKSB7XG5cdFx0XHRcdHZjaGlsZCA9IHZjaGlsZHJlbltfaV07XG5cdFx0XHRcdGNoaWxkID0gbnVsbDtcblxuXHRcdFx0XHR2YXIgX2tleSA9IHZjaGlsZC5rZXk7XG5cdFx0XHRcdGlmIChfa2V5ICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZiAoa2V5ZWRMZW4gJiYga2V5ZWRbX2tleV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Y2hpbGQgPSBrZXllZFtfa2V5XTtcblx0XHRcdFx0XHRcdGtleWVkW19rZXldID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0a2V5ZWRMZW4tLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAobWluIDwgY2hpbGRyZW5MZW4pIHtcblx0XHRcdFx0XHRcdGZvciAoaiA9IG1pbjsgaiA8IGNoaWxkcmVuTGVuOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuW2pdICE9PSB1bmRlZmluZWQgJiYgaXNTYW1lTm9kZVR5cGUoYyA9IGNoaWxkcmVuW2pdLCB2Y2hpbGQsIGlzSHlkcmF0aW5nKSkge1xuXHRcdFx0XHRcdFx0XHRcdGNoaWxkID0gYztcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltqXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRpZiAoaiA9PT0gY2hpbGRyZW5MZW4gLSAxKSBjaGlsZHJlbkxlbi0tO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChqID09PSBtaW4pIG1pbisrO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdGNoaWxkID0gaWRpZmYoY2hpbGQsIHZjaGlsZCwgY29udGV4dCwgbW91bnRBbGwpO1xuXG5cdFx0XHRcdGYgPSBvcmlnaW5hbENoaWxkcmVuW19pXTtcblx0XHRcdFx0aWYgKGNoaWxkICYmIGNoaWxkICE9PSBkb20gJiYgY2hpbGQgIT09IGYpIHtcblx0XHRcdFx0XHRpZiAoZiA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRkb20uYXBwZW5kQ2hpbGQoY2hpbGQpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY2hpbGQgPT09IGYubmV4dFNpYmxpbmcpIHtcblx0XHRcdFx0XHRcdHJlbW92ZU5vZGUoZik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRvbS5pbnNlcnRCZWZvcmUoY2hpbGQsIGYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChrZXllZExlbikge1xuXHRcdFx0Zm9yICh2YXIgX2kyIGluIGtleWVkKSB7XG5cdFx0XHRcdGlmIChrZXllZFtfaTJdICE9PSB1bmRlZmluZWQpIHJlY29sbGVjdE5vZGVUcmVlKGtleWVkW19pMl0sIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR3aGlsZSAobWluIDw9IGNoaWxkcmVuTGVuKSB7XG5cdFx0XHRpZiAoKGNoaWxkID0gY2hpbGRyZW5bY2hpbGRyZW5MZW4tLV0pICE9PSB1bmRlZmluZWQpIHJlY29sbGVjdE5vZGVUcmVlKGNoaWxkLCBmYWxzZSk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVjb2xsZWN0Tm9kZVRyZWUobm9kZSwgdW5tb3VudE9ubHkpIHtcblx0XHR2YXIgY29tcG9uZW50ID0gbm9kZS5fY29tcG9uZW50O1xuXHRcdGlmIChjb21wb25lbnQpIHtcblx0XHRcdHVubW91bnRDb21wb25lbnQoY29tcG9uZW50KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG5vZGVbQVRUUl9LRVldICE9IG51bGwpIGFwcGx5UmVmKG5vZGVbQVRUUl9LRVldLnJlZiwgbnVsbCk7XG5cblx0XHRcdGlmICh1bm1vdW50T25seSA9PT0gZmFsc2UgfHwgbm9kZVtBVFRSX0tFWV0gPT0gbnVsbCkge1xuXHRcdFx0XHRyZW1vdmVOb2RlKG5vZGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZW1vdmVDaGlsZHJlbihub2RlKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmVDaGlsZHJlbihub2RlKSB7XG5cdFx0bm9kZSA9IG5vZGUubGFzdENoaWxkO1xuXHRcdHdoaWxlIChub2RlKSB7XG5cdFx0XHR2YXIgbmV4dCA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuXHRcdFx0cmVjb2xsZWN0Tm9kZVRyZWUobm9kZSwgdHJ1ZSk7XG5cdFx0XHRub2RlID0gbmV4dDtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBkaWZmQXR0cmlidXRlcyhkb20sIGF0dHJzLCBvbGQpIHtcblx0XHR2YXIgbmFtZSA9IHZvaWQgMDtcblxuXHRcdGZvciAobmFtZSBpbiBvbGQpIHtcblx0XHRcdGlmICghKGF0dHJzICYmIGF0dHJzW25hbWVdICE9IG51bGwpICYmIG9sZFtuYW1lXSAhPSBudWxsKSB7XG5cdFx0XHRcdHNldEFjY2Vzc29yKGRvbSwgbmFtZSwgb2xkW25hbWVdLCBvbGRbbmFtZV0gPSB1bmRlZmluZWQsIGlzU3ZnTW9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChuYW1lIGluIGF0dHJzKSB7XG5cdFx0XHRpZiAobmFtZSAhPT0gJ2NoaWxkcmVuJyAmJiBuYW1lICE9PSAnaW5uZXJIVE1MJyAmJiAoIShuYW1lIGluIG9sZCkgfHwgYXR0cnNbbmFtZV0gIT09IChuYW1lID09PSAndmFsdWUnIHx8IG5hbWUgPT09ICdjaGVja2VkJyA/IGRvbVtuYW1lXSA6IG9sZFtuYW1lXSkpKSB7XG5cdFx0XHRcdHNldEFjY2Vzc29yKGRvbSwgbmFtZSwgb2xkW25hbWVdLCBvbGRbbmFtZV0gPSBhdHRyc1tuYW1lXSwgaXNTdmdNb2RlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR2YXIgcmVjeWNsZXJDb21wb25lbnRzID0gW107XG5cblx0ZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50KEN0b3IsIHByb3BzLCBjb250ZXh0KSB7XG5cdFx0dmFyIGluc3QgPSB2b2lkIDAsXG5cdFx0ICAgIGkgPSByZWN5Y2xlckNvbXBvbmVudHMubGVuZ3RoO1xuXG5cdFx0aWYgKEN0b3IucHJvdG90eXBlICYmIEN0b3IucHJvdG90eXBlLnJlbmRlcikge1xuXHRcdFx0aW5zdCA9IG5ldyBDdG9yKHByb3BzLCBjb250ZXh0KTtcblx0XHRcdENvbXBvbmVudC5jYWxsKGluc3QsIHByb3BzLCBjb250ZXh0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aW5zdCA9IG5ldyBDb21wb25lbnQocHJvcHMsIGNvbnRleHQpO1xuXHRcdFx0aW5zdC5jb25zdHJ1Y3RvciA9IEN0b3I7XG5cdFx0XHRpbnN0LnJlbmRlciA9IGRvUmVuZGVyO1xuXHRcdH1cblxuXHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdGlmIChyZWN5Y2xlckNvbXBvbmVudHNbaV0uY29uc3RydWN0b3IgPT09IEN0b3IpIHtcblx0XHRcdFx0aW5zdC5uZXh0QmFzZSA9IHJlY3ljbGVyQ29tcG9uZW50c1tpXS5uZXh0QmFzZTtcblx0XHRcdFx0cmVjeWNsZXJDb21wb25lbnRzLnNwbGljZShpLCAxKTtcblx0XHRcdFx0cmV0dXJuIGluc3Q7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluc3Q7XG5cdH1cblxuXHRmdW5jdGlvbiBkb1JlbmRlcihwcm9wcywgc3RhdGUsIGNvbnRleHQpIHtcblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCk7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDb21wb25lbnRQcm9wcyhjb21wb25lbnQsIHByb3BzLCByZW5kZXJNb2RlLCBjb250ZXh0LCBtb3VudEFsbCkge1xuXHRcdGlmIChjb21wb25lbnQuX2Rpc2FibGUpIHJldHVybjtcblx0XHRjb21wb25lbnQuX2Rpc2FibGUgPSB0cnVlO1xuXG5cdFx0Y29tcG9uZW50Ll9fcmVmID0gcHJvcHMucmVmO1xuXHRcdGNvbXBvbmVudC5fX2tleSA9IHByb3BzLmtleTtcblx0XHRkZWxldGUgcHJvcHMucmVmO1xuXHRcdGRlbGV0ZSBwcm9wcy5rZXk7XG5cblx0XHRpZiAodHlwZW9mIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRpZiAoIWNvbXBvbmVudC5iYXNlIHx8IG1vdW50QWxsKSB7XG5cdFx0XHRcdGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbE1vdW50KSBjb21wb25lbnQuY29tcG9uZW50V2lsbE1vdW50KCk7XG5cdFx0XHR9IGVsc2UgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB7XG5cdFx0XHRcdGNvbXBvbmVudC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzLCBjb250ZXh0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoY29udGV4dCAmJiBjb250ZXh0ICE9PSBjb21wb25lbnQuY29udGV4dCkge1xuXHRcdFx0aWYgKCFjb21wb25lbnQucHJldkNvbnRleHQpIGNvbXBvbmVudC5wcmV2Q29udGV4dCA9IGNvbXBvbmVudC5jb250ZXh0O1xuXHRcdFx0Y29tcG9uZW50LmNvbnRleHQgPSBjb250ZXh0O1xuXHRcdH1cblxuXHRcdGlmICghY29tcG9uZW50LnByZXZQcm9wcykgY29tcG9uZW50LnByZXZQcm9wcyA9IGNvbXBvbmVudC5wcm9wcztcblx0XHRjb21wb25lbnQucHJvcHMgPSBwcm9wcztcblxuXHRcdGNvbXBvbmVudC5fZGlzYWJsZSA9IGZhbHNlO1xuXG5cdFx0aWYgKHJlbmRlck1vZGUgIT09IE5PX1JFTkRFUikge1xuXHRcdFx0aWYgKHJlbmRlck1vZGUgPT09IFNZTkNfUkVOREVSIHx8IG9wdGlvbnMuc3luY0NvbXBvbmVudFVwZGF0ZXMgIT09IGZhbHNlIHx8ICFjb21wb25lbnQuYmFzZSkge1xuXHRcdFx0XHRyZW5kZXJDb21wb25lbnQoY29tcG9uZW50LCBTWU5DX1JFTkRFUiwgbW91bnRBbGwpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZW5xdWV1ZVJlbmRlcihjb21wb25lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGFwcGx5UmVmKGNvbXBvbmVudC5fX3JlZiwgY29tcG9uZW50KTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudChjb21wb25lbnQsIHJlbmRlck1vZGUsIG1vdW50QWxsLCBpc0NoaWxkKSB7XG5cdFx0aWYgKGNvbXBvbmVudC5fZGlzYWJsZSkgcmV0dXJuO1xuXG5cdFx0dmFyIHByb3BzID0gY29tcG9uZW50LnByb3BzLFxuXHRcdCAgICBzdGF0ZSA9IGNvbXBvbmVudC5zdGF0ZSxcblx0XHQgICAgY29udGV4dCA9IGNvbXBvbmVudC5jb250ZXh0LFxuXHRcdCAgICBwcmV2aW91c1Byb3BzID0gY29tcG9uZW50LnByZXZQcm9wcyB8fCBwcm9wcyxcblx0XHQgICAgcHJldmlvdXNTdGF0ZSA9IGNvbXBvbmVudC5wcmV2U3RhdGUgfHwgc3RhdGUsXG5cdFx0ICAgIHByZXZpb3VzQ29udGV4dCA9IGNvbXBvbmVudC5wcmV2Q29udGV4dCB8fCBjb250ZXh0LFxuXHRcdCAgICBpc1VwZGF0ZSA9IGNvbXBvbmVudC5iYXNlLFxuXHRcdCAgICBuZXh0QmFzZSA9IGNvbXBvbmVudC5uZXh0QmFzZSxcblx0XHQgICAgaW5pdGlhbEJhc2UgPSBpc1VwZGF0ZSB8fCBuZXh0QmFzZSxcblx0XHQgICAgaW5pdGlhbENoaWxkQ29tcG9uZW50ID0gY29tcG9uZW50Ll9jb21wb25lbnQsXG5cdFx0ICAgIHNraXAgPSBmYWxzZSxcblx0XHQgICAgc25hcHNob3QgPSBwcmV2aW91c0NvbnRleHQsXG5cdFx0ICAgIHJlbmRlcmVkID0gdm9pZCAwLFxuXHRcdCAgICBpbnN0ID0gdm9pZCAwLFxuXHRcdCAgICBjYmFzZSA9IHZvaWQgMDtcblxuXHRcdGlmIChjb21wb25lbnQuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKSB7XG5cdFx0XHRzdGF0ZSA9IGV4dGVuZChleHRlbmQoe30sIHN0YXRlKSwgY29tcG9uZW50LmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpKTtcblx0XHRcdGNvbXBvbmVudC5zdGF0ZSA9IHN0YXRlO1xuXHRcdH1cblxuXHRcdGlmIChpc1VwZGF0ZSkge1xuXHRcdFx0Y29tcG9uZW50LnByb3BzID0gcHJldmlvdXNQcm9wcztcblx0XHRcdGNvbXBvbmVudC5zdGF0ZSA9IHByZXZpb3VzU3RhdGU7XG5cdFx0XHRjb21wb25lbnQuY29udGV4dCA9IHByZXZpb3VzQ29udGV4dDtcblx0XHRcdGlmIChyZW5kZXJNb2RlICE9PSBGT1JDRV9SRU5ERVIgJiYgY29tcG9uZW50LnNob3VsZENvbXBvbmVudFVwZGF0ZSAmJiBjb21wb25lbnQuc2hvdWxkQ29tcG9uZW50VXBkYXRlKHByb3BzLCBzdGF0ZSwgY29udGV4dCkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHNraXAgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbFVwZGF0ZSkge1xuXHRcdFx0XHRjb21wb25lbnQuY29tcG9uZW50V2lsbFVwZGF0ZShwcm9wcywgc3RhdGUsIGNvbnRleHQpO1xuXHRcdFx0fVxuXHRcdFx0Y29tcG9uZW50LnByb3BzID0gcHJvcHM7XG5cdFx0XHRjb21wb25lbnQuc3RhdGUgPSBzdGF0ZTtcblx0XHRcdGNvbXBvbmVudC5jb250ZXh0ID0gY29udGV4dDtcblx0XHR9XG5cblx0XHRjb21wb25lbnQucHJldlByb3BzID0gY29tcG9uZW50LnByZXZTdGF0ZSA9IGNvbXBvbmVudC5wcmV2Q29udGV4dCA9IGNvbXBvbmVudC5uZXh0QmFzZSA9IG51bGw7XG5cdFx0Y29tcG9uZW50Ll9kaXJ0eSA9IGZhbHNlO1xuXG5cdFx0aWYgKCFza2lwKSB7XG5cdFx0XHRyZW5kZXJlZCA9IGNvbXBvbmVudC5yZW5kZXIocHJvcHMsIHN0YXRlLCBjb250ZXh0KTtcblxuXHRcdFx0aWYgKGNvbXBvbmVudC5nZXRDaGlsZENvbnRleHQpIHtcblx0XHRcdFx0Y29udGV4dCA9IGV4dGVuZChleHRlbmQoe30sIGNvbnRleHQpLCBjb21wb25lbnQuZ2V0Q2hpbGRDb250ZXh0KCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNVcGRhdGUgJiYgY29tcG9uZW50LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKSB7XG5cdFx0XHRcdHNuYXBzaG90ID0gY29tcG9uZW50LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZpb3VzUHJvcHMsIHByZXZpb3VzU3RhdGUpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2hpbGRDb21wb25lbnQgPSByZW5kZXJlZCAmJiByZW5kZXJlZC5ub2RlTmFtZSxcblx0XHRcdCAgICB0b1VubW91bnQgPSB2b2lkIDAsXG5cdFx0XHQgICAgYmFzZSA9IHZvaWQgMDtcblxuXHRcdFx0aWYgKHR5cGVvZiBjaGlsZENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuXG5cdFx0XHRcdHZhciBjaGlsZFByb3BzID0gZ2V0Tm9kZVByb3BzKHJlbmRlcmVkKTtcblx0XHRcdFx0aW5zdCA9IGluaXRpYWxDaGlsZENvbXBvbmVudDtcblxuXHRcdFx0XHRpZiAoaW5zdCAmJiBpbnN0LmNvbnN0cnVjdG9yID09PSBjaGlsZENvbXBvbmVudCAmJiBjaGlsZFByb3BzLmtleSA9PSBpbnN0Ll9fa2V5KSB7XG5cdFx0XHRcdFx0c2V0Q29tcG9uZW50UHJvcHMoaW5zdCwgY2hpbGRQcm9wcywgU1lOQ19SRU5ERVIsIGNvbnRleHQsIGZhbHNlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0b1VubW91bnQgPSBpbnN0O1xuXG5cdFx0XHRcdFx0Y29tcG9uZW50Ll9jb21wb25lbnQgPSBpbnN0ID0gY3JlYXRlQ29tcG9uZW50KGNoaWxkQ29tcG9uZW50LCBjaGlsZFByb3BzLCBjb250ZXh0KTtcblx0XHRcdFx0XHRpbnN0Lm5leHRCYXNlID0gaW5zdC5uZXh0QmFzZSB8fCBuZXh0QmFzZTtcblx0XHRcdFx0XHRpbnN0Ll9wYXJlbnRDb21wb25lbnQgPSBjb21wb25lbnQ7XG5cdFx0XHRcdFx0c2V0Q29tcG9uZW50UHJvcHMoaW5zdCwgY2hpbGRQcm9wcywgTk9fUkVOREVSLCBjb250ZXh0LCBmYWxzZSk7XG5cdFx0XHRcdFx0cmVuZGVyQ29tcG9uZW50KGluc3QsIFNZTkNfUkVOREVSLCBtb3VudEFsbCwgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlID0gaW5zdC5iYXNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2Jhc2UgPSBpbml0aWFsQmFzZTtcblxuXHRcdFx0XHR0b1VubW91bnQgPSBpbml0aWFsQ2hpbGRDb21wb25lbnQ7XG5cdFx0XHRcdGlmICh0b1VubW91bnQpIHtcblx0XHRcdFx0XHRjYmFzZSA9IGNvbXBvbmVudC5fY29tcG9uZW50ID0gbnVsbDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChpbml0aWFsQmFzZSB8fCByZW5kZXJNb2RlID09PSBTWU5DX1JFTkRFUikge1xuXHRcdFx0XHRcdGlmIChjYmFzZSkgY2Jhc2UuX2NvbXBvbmVudCA9IG51bGw7XG5cdFx0XHRcdFx0YmFzZSA9IGRpZmYoY2Jhc2UsIHJlbmRlcmVkLCBjb250ZXh0LCBtb3VudEFsbCB8fCAhaXNVcGRhdGUsIGluaXRpYWxCYXNlICYmIGluaXRpYWxCYXNlLnBhcmVudE5vZGUsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpbml0aWFsQmFzZSAmJiBiYXNlICE9PSBpbml0aWFsQmFzZSAmJiBpbnN0ICE9PSBpbml0aWFsQ2hpbGRDb21wb25lbnQpIHtcblx0XHRcdFx0dmFyIGJhc2VQYXJlbnQgPSBpbml0aWFsQmFzZS5wYXJlbnROb2RlO1xuXHRcdFx0XHRpZiAoYmFzZVBhcmVudCAmJiBiYXNlICE9PSBiYXNlUGFyZW50KSB7XG5cdFx0XHRcdFx0YmFzZVBhcmVudC5yZXBsYWNlQ2hpbGQoYmFzZSwgaW5pdGlhbEJhc2UpO1xuXG5cdFx0XHRcdFx0aWYgKCF0b1VubW91bnQpIHtcblx0XHRcdFx0XHRcdGluaXRpYWxCYXNlLl9jb21wb25lbnQgPSBudWxsO1xuXHRcdFx0XHRcdFx0cmVjb2xsZWN0Tm9kZVRyZWUoaW5pdGlhbEJhc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRvVW5tb3VudCkge1xuXHRcdFx0XHR1bm1vdW50Q29tcG9uZW50KHRvVW5tb3VudCk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBvbmVudC5iYXNlID0gYmFzZTtcblx0XHRcdGlmIChiYXNlICYmICFpc0NoaWxkKSB7XG5cdFx0XHRcdHZhciBjb21wb25lbnRSZWYgPSBjb21wb25lbnQsXG5cdFx0XHRcdCAgICB0ID0gY29tcG9uZW50O1xuXHRcdFx0XHR3aGlsZSAodCA9IHQuX3BhcmVudENvbXBvbmVudCkge1xuXHRcdFx0XHRcdChjb21wb25lbnRSZWYgPSB0KS5iYXNlID0gYmFzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRiYXNlLl9jb21wb25lbnQgPSBjb21wb25lbnRSZWY7XG5cdFx0XHRcdGJhc2UuX2NvbXBvbmVudENvbnN0cnVjdG9yID0gY29tcG9uZW50UmVmLmNvbnN0cnVjdG9yO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghaXNVcGRhdGUgfHwgbW91bnRBbGwpIHtcblx0XHRcdG1vdW50cy5wdXNoKGNvbXBvbmVudCk7XG5cdFx0fSBlbHNlIGlmICghc2tpcCkge1xuXG5cdFx0XHRpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZFVwZGF0ZSkge1xuXHRcdFx0XHRjb21wb25lbnQuY29tcG9uZW50RGlkVXBkYXRlKHByZXZpb3VzUHJvcHMsIHByZXZpb3VzU3RhdGUsIHNuYXBzaG90KTtcblx0XHRcdH1cblx0XHRcdGlmIChvcHRpb25zLmFmdGVyVXBkYXRlKSBvcHRpb25zLmFmdGVyVXBkYXRlKGNvbXBvbmVudCk7XG5cdFx0fVxuXG5cdFx0d2hpbGUgKGNvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0Y29tcG9uZW50Ll9yZW5kZXJDYWxsYmFja3MucG9wKCkuY2FsbChjb21wb25lbnQpO1xuXHRcdH1pZiAoIWRpZmZMZXZlbCAmJiAhaXNDaGlsZCkgZmx1c2hNb3VudHMoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJ1aWxkQ29tcG9uZW50RnJvbVZOb2RlKGRvbSwgdm5vZGUsIGNvbnRleHQsIG1vdW50QWxsKSB7XG5cdFx0dmFyIGMgPSBkb20gJiYgZG9tLl9jb21wb25lbnQsXG5cdFx0ICAgIG9yaWdpbmFsQ29tcG9uZW50ID0gYyxcblx0XHQgICAgb2xkRG9tID0gZG9tLFxuXHRcdCAgICBpc0RpcmVjdE93bmVyID0gYyAmJiBkb20uX2NvbXBvbmVudENvbnN0cnVjdG9yID09PSB2bm9kZS5ub2RlTmFtZSxcblx0XHQgICAgaXNPd25lciA9IGlzRGlyZWN0T3duZXIsXG5cdFx0ICAgIHByb3BzID0gZ2V0Tm9kZVByb3BzKHZub2RlKTtcblx0XHR3aGlsZSAoYyAmJiAhaXNPd25lciAmJiAoYyA9IGMuX3BhcmVudENvbXBvbmVudCkpIHtcblx0XHRcdGlzT3duZXIgPSBjLmNvbnN0cnVjdG9yID09PSB2bm9kZS5ub2RlTmFtZTtcblx0XHR9XG5cblx0XHRpZiAoYyAmJiBpc093bmVyICYmICghbW91bnRBbGwgfHwgYy5fY29tcG9uZW50KSkge1xuXHRcdFx0c2V0Q29tcG9uZW50UHJvcHMoYywgcHJvcHMsIEFTWU5DX1JFTkRFUiwgY29udGV4dCwgbW91bnRBbGwpO1xuXHRcdFx0ZG9tID0gYy5iYXNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAob3JpZ2luYWxDb21wb25lbnQgJiYgIWlzRGlyZWN0T3duZXIpIHtcblx0XHRcdFx0dW5tb3VudENvbXBvbmVudChvcmlnaW5hbENvbXBvbmVudCk7XG5cdFx0XHRcdGRvbSA9IG9sZERvbSA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGMgPSBjcmVhdGVDb21wb25lbnQodm5vZGUubm9kZU5hbWUsIHByb3BzLCBjb250ZXh0KTtcblx0XHRcdGlmIChkb20gJiYgIWMubmV4dEJhc2UpIHtcblx0XHRcdFx0Yy5uZXh0QmFzZSA9IGRvbTtcblxuXHRcdFx0XHRvbGREb20gPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0c2V0Q29tcG9uZW50UHJvcHMoYywgcHJvcHMsIFNZTkNfUkVOREVSLCBjb250ZXh0LCBtb3VudEFsbCk7XG5cdFx0XHRkb20gPSBjLmJhc2U7XG5cblx0XHRcdGlmIChvbGREb20gJiYgZG9tICE9PSBvbGREb20pIHtcblx0XHRcdFx0b2xkRG9tLl9jb21wb25lbnQgPSBudWxsO1xuXHRcdFx0XHRyZWNvbGxlY3ROb2RlVHJlZShvbGREb20sIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZG9tO1xuXHR9XG5cblx0ZnVuY3Rpb24gdW5tb3VudENvbXBvbmVudChjb21wb25lbnQpIHtcblx0XHRpZiAob3B0aW9ucy5iZWZvcmVVbm1vdW50KSBvcHRpb25zLmJlZm9yZVVubW91bnQoY29tcG9uZW50KTtcblxuXHRcdHZhciBiYXNlID0gY29tcG9uZW50LmJhc2U7XG5cblx0XHRjb21wb25lbnQuX2Rpc2FibGUgPSB0cnVlO1xuXG5cdFx0aWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsVW5tb3VudCkgY29tcG9uZW50LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cblx0XHRjb21wb25lbnQuYmFzZSA9IG51bGw7XG5cblx0XHR2YXIgaW5uZXIgPSBjb21wb25lbnQuX2NvbXBvbmVudDtcblx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdHVubW91bnRDb21wb25lbnQoaW5uZXIpO1xuXHRcdH0gZWxzZSBpZiAoYmFzZSkge1xuXHRcdFx0aWYgKGJhc2VbQVRUUl9LRVldICE9IG51bGwpIGFwcGx5UmVmKGJhc2VbQVRUUl9LRVldLnJlZiwgbnVsbCk7XG5cblx0XHRcdGNvbXBvbmVudC5uZXh0QmFzZSA9IGJhc2U7XG5cblx0XHRcdHJlbW92ZU5vZGUoYmFzZSk7XG5cdFx0XHRyZWN5Y2xlckNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuXG5cdFx0XHRyZW1vdmVDaGlsZHJlbihiYXNlKTtcblx0XHR9XG5cblx0XHRhcHBseVJlZihjb21wb25lbnQuX19yZWYsIG51bGwpO1xuXHR9XG5cblx0ZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0KSB7XG5cdFx0dGhpcy5fZGlydHkgPSB0cnVlO1xuXG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuXHRcdHRoaXMucHJvcHMgPSBwcm9wcztcblxuXHRcdHRoaXMuc3RhdGUgPSB0aGlzLnN0YXRlIHx8IHt9O1xuXG5cdFx0dGhpcy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdH1cblxuXHRleHRlbmQoQ29tcG9uZW50LnByb3RvdHlwZSwge1xuXHRcdHNldFN0YXRlOiBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSwgY2FsbGJhY2spIHtcblx0XHRcdGlmICghdGhpcy5wcmV2U3RhdGUpIHRoaXMucHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcblx0XHRcdHRoaXMuc3RhdGUgPSBleHRlbmQoZXh0ZW5kKHt9LCB0aGlzLnN0YXRlKSwgdHlwZW9mIHN0YXRlID09PSAnZnVuY3Rpb24nID8gc3RhdGUodGhpcy5zdGF0ZSwgdGhpcy5wcm9wcykgOiBzdGF0ZSk7XG5cdFx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRcdGVucXVldWVSZW5kZXIodGhpcyk7XG5cdFx0fSxcblx0XHRmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoY2FsbGJhY2spIHtcblx0XHRcdGlmIChjYWxsYmFjaykgdGhpcy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXHRcdFx0cmVuZGVyQ29tcG9uZW50KHRoaXMsIEZPUkNFX1JFTkRFUik7XG5cdFx0fSxcblx0XHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHt9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIHJlbmRlcih2bm9kZSwgcGFyZW50LCBtZXJnZSkge1xuXHQgIHJldHVybiBkaWZmKG1lcmdlLCB2bm9kZSwge30sIGZhbHNlLCBwYXJlbnQsIGZhbHNlKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVJlZigpIHtcblx0XHRyZXR1cm4ge307XG5cdH1cblxuXHR2YXIgcHJlYWN0ID0ge1xuXHRcdGg6IGgsXG5cdFx0Y3JlYXRlRWxlbWVudDogaCxcblx0XHRjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudCxcblx0XHRjcmVhdGVSZWY6IGNyZWF0ZVJlZixcblx0XHRDb21wb25lbnQ6IENvbXBvbmVudCxcblx0XHRyZW5kZXI6IHJlbmRlcixcblx0XHRyZXJlbmRlcjogcmVyZW5kZXIsXG5cdFx0b3B0aW9uczogb3B0aW9uc1xuXHR9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IHByZWFjdDtcblx0ZXhwb3J0cy5oID0gaDtcblx0ZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gaDtcblx0ZXhwb3J0cy5jbG9uZUVsZW1lbnQgPSBjbG9uZUVsZW1lbnQ7XG5cdGV4cG9ydHMuY3JlYXRlUmVmID0gY3JlYXRlUmVmO1xuXHRleHBvcnRzLkNvbXBvbmVudCA9IENvbXBvbmVudDtcblx0ZXhwb3J0cy5yZW5kZXIgPSByZW5kZXI7XG5cdGV4cG9ydHMucmVyZW5kZXIgPSByZXJlbmRlcjtcblx0ZXhwb3J0cy5vcHRpb25zID0gb3B0aW9ucztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0LnVtZC5qcy5tYXBcbiIsImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gJ3ByZWFjdCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGxpc3RJdGVtIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xIG0tMlwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2hhZG93IHJvdW5kZWQtYlwiPlxyXG4gICAgICAgICAgICAgICA8YSBocmVmPXt0aGlzLnByb3BzLnVybH0+XHJcbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aGlzLnByb3BzLmltZ1NyY30gY2xhc3M9XCJyb3VuZGVkLXRcIi8+XHJcbiAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJnLXdoaXRlIC1tdC0xIHB4LTQgcHktMyByb3VuZGVkLWJcIj5cclxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj17dGhpcy5wcm9wcy51cmx9XHJcbiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9udC1ib2xkIHRleHQtZ3JheS04MDAgaG92ZXI6dGV4dC1ibGFja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgICAgPC9hPiBcclxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj17dGhpcy5wcm9wcy51cmx9XHJcbiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYmxvY2sgbXktMiBmb250LW5vcm1hbCB0ZXh0LXNtIG5vLXVuZGVybGluZSB0ZXh0LWdyYXktODAwIGhvdmVyOnRleHQtYmxhY2tcIj5cclxuICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuby11bmRlcmxpbmUgdGV4dC14cyB0ZXh0LWJsYWNrIHRyYWNraW5nLXdpZGUgZm9udC1ub3JtYWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubW9yZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBoLCByZW5kZXIsIENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCBMaXN0SXRlbSBmcm9tICcuL2NvbXBvbmVudHMvbGlzdEl0ZW0nXHJcblxyXG5sZXQgTGluZSA9ICh7IGNoaWxkcmVuIH0pID0+ICg8ZGl2IGNsYXNzPVwiYmxvY2sgbWQ6ZmxleCBtZDpqdXN0aWZ5LWJldHdlZW5cIj4ge2NoaWxkcmVufSA8L2Rpdj4pXHJcblxyXG5sZXQgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaXN0JylcclxubGV0IHJvb3QgPSByZW5kZXIoXHJcbiAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgPExpbmU+XHJcbiAgICAgICAgICAgIDxMaXN0SXRlbVxyXG4gICAgICAgICAgICAgICAgaW1nU3JjPVwiYXNzZXRzL2ZsZXhib3h5LmpwZ1wiXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cImZsZXhib3h5LmNvbSAtIFdlYidzIEZsZXhib3ggRWRpdG9yXCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiRmxleGJveHkgaXMgYW4gb3BlbiBzb3VyY2UgdG9vbCBmb3IgYnVpbGRpbmcgZmxleGJveC1iYXNlZCBsYXlvdXRzLiBUaGUgb25saW5lIGVkaXRvciBsZXRzIHlvdSBidWlsZCB0ZW1wbGF0ZXMgZmFzdGVyIHRoYW4gZXZlciwgYnkgZ2VuZXJhdGluZyBIVE1MIGFuZCBDU1MgZm9yIHlvdS5cIlxyXG4gICAgICAgICAgICAgICAgbW9yZT1cIldlYnBhY2sgwrcgQmFiZWwgwrcgQ2FudmFzIEFQSSDCtyBQb3N0Q1NTIMK3IEF1dG9wcmVmaXhlciDCtyBTQVNTIMK3IEVKU1wiXHJcbiAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL3d3dy5mbGV4Ym94eS5jb20vXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICBpbWdTcmM9XCIuL2Fzc2V0cy9kaXNwbGFjZW1lbnQuanBnXCJcclxuICAgICAgICAgICAgICAgIHRpdGxlPVwiSW50ZXJhY3RpdmUgRGlzcGxhY2VtZW50IE1hcCBFeHBlcmltZW50XCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiVGhpcyBwcm9qZWN0IGlzIHN0YXJ0ZWQgYXMgYSBtdXNpYyB2aXN1YWxpemVyLiBNb3VzZSBwb3NpdGlvbiBtb2R1bGF0ZXMgZGlzcGxhY2VtZW50IGZpbHRlciBwb3NpdGlvbiBhbmQgaW1hZ2UgcG9zaXRpb24uIEFsc28sIHRoZXJlIGlzIGEgZ2xpdGNoIGZpbHRlciBvbiBtb3VzZSBjbGljay4gU25vdyBjcnlzdGFsIGltYWdlcyBmcm9tIFdpa2ltZWRpYSBhcmUgdXNlZC4gXCJcclxuICAgICAgICAgICAgICAgIG1vcmU9XCJXZWJHTCDCtyBQSVhJLmpzXCJcclxuICAgICAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZGlzcGxhY2VtZW50LW1hcC5uZXRsaWZ5LmNvbS9cIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvTGluZT5cclxuICAgICAgICA8TGluZT5cclxuICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICBpbWdTcmM9XCJhc3NldHMveXQuanBnXCJcclxuICAgICAgICAgICAgICAgIHRpdGxlPVwiWW91VHViZSBWaWRlbyBFZmZlY3RzXCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQSBDaHJvbWUgZXh0ZW5zaW9uIHRoYXQgcHJvdmlkZXMgcmVhbHRpbWUgdmlkZW8gZWZmZWN0cyBmb3IgWW91VHViZS4gVXNlcyBXZWJHTCB0ZWNobm9sb2d5LiBQb3dlcmVkIGJ5IGdsZnguanMgdG8gcHJvdmlkZSBlZmZlY3RzLlwiXHJcbiAgICAgICAgICAgICAgICBtb3JlPVwiQ2hyb21lIEV4dGVuc2lvbiDCtyBXZWJHTCDCtyBnbGZ4LmpzXCJcclxuICAgICAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZ2l0aHViLmNvbS9vbnVya2VyaW1vdi95b3V0dWJlLXZpZGVvLWVmZmVjdHNcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8TGlzdEl0ZW1cclxuICAgICAgICAgICAgICAgIGltZ1NyYz1cImFzc2V0cy9tb25rZXkuanBnXCJcclxuICAgICAgICAgICAgICAgIHRpdGxlPVwiRmFrZSAzRCBSb3RhdGlvbiBFeHBlcmltZW50XCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiSW4gdGhpcyBwcm9qZWN0LCBJIHJvdGF0ZWQgYSBzY3VscHR1cmUgKGEgdmVyeSBwcmVjaW91cyBnaWZ0KSBvbiBhIHR1cm50YWJsZSBhbmQgZXh0cmFjdGVkIGEgc3ByaXRlc2hlZXQuIE1vdXNlIHBvc2l0aW9uIGRldGVybWluZXMgdGhlIGZyYW1lIGluZGV4IG9mIHRoZSBzcHJpdGUuXCJcclxuICAgICAgICAgICAgICAgIG1vcmU9XCJXZWJHTCDCtyBQSVhJLmpzIMK3IFJlbmRlclRleHR1cmUgwrcgU3ByaXRlc2hlZXRcIlxyXG4gICAgICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9vbnVya2VyaW1vdi5naXRodWIuaW8vZGFtbGFcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8TGlzdEl0ZW1cclxuICAgICAgICAgICAgICAgIGltZ1NyYz1cImFzc2V0cy9jYW52YXMuanBnXCJcclxuICAgICAgICAgICAgICAgIHRpdGxlPVwiQ2FudmFzMkQgRHJhdyBFeHBlcmltZW50XCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiTW92aW5nIEF2ZXJhZ2VzIG9mIG1vdXNlIGNvb3JkaW5hdGVzIGFyZSBjYWxjdWxhdGVkIGNvbnRpbnVvdXNseSB0byBnaXZlIGFuIGV4cHJlc3NpdmUgZWZmZWN0LiBQcmVzcyBbU10gdG8gc2F2ZSBzY3JlZW5zaG90cy4gQ291bGQgcG9zc2libHkgYmUgdXNlZCBhcyBhIG11c2ljIHZpc3VhbGl6ZXIuXCJcclxuICAgICAgICAgICAgICAgIG1vcmU9XCJXZWJHTCDCtyBQSVhJLmpzXCJcclxuICAgICAgICAgICAgICAgIHVybD1cImh0dHBzOi8vb251cmtlcmltb3YuZ2l0aHViLmlvL2RyYXdNb3VzZS1tb3ZpbmdBdmVyYWdlL1wiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9MaW5lPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWdyb3cgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBwLTRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kOnB4LTggcGwtMFwiPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJzbTp0ZXh0LXhsIHRleHQtZ3JheS02MDAgbXQtMyBsZWFkaW5nLXJlbGF4ZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICBJIGFsc28gZGV2ZWxvcGVkIHRoZSBmb2xsb3dpbmcgcmV1c2FibGUgcGx1Z2lucyB3aGlsZSBidWlsZGluZyB0aGluZ3MuXHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8TGluZT5cclxuICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cImVuaGFuY2Vab29tLmpzXCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiUHJldmVudCB6b29tIG9uIHNvbWUgZWxlbWVudHMgb24gYSBwYWdlIChvciB3aG9sZSBwYWdlKSwgc2V0IGN1c3RvbSB6b29tIGZhY3RvcnMgdG8gZWxlbWVudHMgd2l0aCBtYXRoZW1hdGljYWwgZXhwcmVzc2lvbnNcclxuICAgICAgICAgICAgICAgIFwiXHJcbiAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vb251cmtlcmltb3YvZW5oYW5jZVpvb20uanNcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cInBzZXVkby5qc1wiXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj1cIkEgcGx1Z2luIHRvIGNvbnZlcnQgOmJlZm9yZSBhbmQgOmFmdGVyIHBzZXVkbyBlbGVtZW50cyB0byByZWFsIGVsZW1lbnRzXCJcclxuICAgICAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZ2l0aHViLmNvbS9vbnVya2VyaW1vdi9wc2V1ZG8uanNcIiBcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cImN1cmx5LmpzXCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQ29udmVydHMgdGV4dCB3aXRoIGluZGVudGF0aW9uIHRvIHRyZWUgaGllcmFyY2h5XCJcclxuICAgICAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZ2l0aHViLmNvbS9vbnVya2VyaW1vdi9jdXJseS5qc1wiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxMaXN0SXRlbVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJ0aW1lb3V0LmpzXCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQSBzbWFydGVyIHNldFRpbWVvdXQgdGhhdCBpbnZvbHZlcyBncm91cGluZyAmIGluc3RhbmNlc1wiXHJcbiAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vb251cmtlcmltb3YvdGltZW91dC5qc1wiIFxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvTGluZT5cclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZ3JvdyBmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIHAtNFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWQ6cHgtOCBwbC0wXCI+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInNtOnRleHQteGwgdGV4dC1ncmF5LTYwMCBtdC0zIGxlYWRpbmctcmVsYXhlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIEhlcmUgYXJlIHNvbWUgZXhwZXJpbWVudGFsIHBsdWdpbnMgYnkgbWU6XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8TGluZT5cclxuICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cImRlZXAuanNcIlxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJBIHNob3J0ZXIgcmVwbGFjZW1lbnQgZm9yIGRlZXBseSBuZXN0ZWQgZm9yL2ZvckVhY2ggbG9vcHNcIlxyXG4gICAgICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9naXRodWIuY29tL29udXJrZXJpbW92L2RlZXAuanNcIlxyXG4gICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIm1hdGNoLmpzXCJcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQW4gYWx0ZXJuYXRpdmUgZm9yIGlmL2Vsc2Ugc29tZXRpbWVzIGFuZCBzd2l0Y2gvY2FzZSBtb3N0IG9mIHRoZSB0aW1lc1wiXHJcbiAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vb251cmtlcmltb3YvbWF0Y2guanNcIiBcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9MaW5lPlxyXG4gICAgPC9GcmFnbWVudD5cclxuICAgICwgbGlzdClcclxuLypcclxuICAgIHdpdGggaHR0cHM6Ly9naXRodWIuY29tL29udXJrZXJpbW92L3dpdGguanNcclxuICAgIHRyeSBodHRwczovL2dpdGh1Yi5jb20vb251cmtlcmltb3YvdHJ5LmpzXHJcbiAgICBtYXRjaCBodHRwczovL2dpdGh1Yi5jb20vb251cmtlcmltb3YvbWF0Y2guanNcclxuKi8iXSwic291cmNlUm9vdCI6IiJ9